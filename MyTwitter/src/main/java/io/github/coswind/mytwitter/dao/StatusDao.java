package io.github.coswind.mytwitter.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STATUS.
*/
public class StatusDao extends AbstractDao<TwitterStatus, Long> {

    public static final String TABLENAME = "STATUS";

    /**
     * Properties of entity Status.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StatusId = new Property(1, Long.class, "statusId", false, "STATUS_ID");
        public final static Property IsRetweet = new Property(2, Boolean.class, "isRetweet", false, "IS_RETWEET");
        public final static Property IsRetweetedByMe = new Property(3, Boolean.class, "isRetweetedByMe", false, "IS_RETWEETED_BY_ME");
        public final static Property IsFavorite = new Property(4, Boolean.class, "isFavorite", false, "IS_FAVORITE");
        public final static Property RetweetId = new Property(5, Long.class, "retweetId", false, "RETWEET_ID");
        public final static Property RetweetedByUserId = new Property(6, Long.class, "retweetedByUserId", false, "RETWEETED_BY_USER_ID");
        public final static Property RetweetedByUserName = new Property(7, String.class, "retweetedByUserName", false, "RETWEETED_BY_USER_NAME");
        public final static Property RetweetedByUserScreenName = new Property(8, String.class, "retweetedByUserScreenName", false, "RETWEETED_BY_USER_SCREEN_NAME");
        public final static Property UserId = new Property(9, Long.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(10, String.class, "userName", false, "USER_NAME");
        public final static Property UserScreenName = new Property(11, String.class, "userScreenName", false, "USER_SCREEN_NAME");
        public final static Property UserProfileImageUrl = new Property(12, String.class, "userProfileImageUrl", false, "USER_PROFILE_IMAGE_URL");
        public final static Property StatusTimeStamp = new Property(13, Long.class, "statusTimeStamp", false, "STATUS_TIME_STAMP");
        public final static Property Text = new Property(14, String.class, "text", false, "TEXT");
        public final static Property RetweetCount = new Property(15, Integer.class, "retweetCount", false, "RETWEET_COUNT");
        public final static Property Source = new Property(16, String.class, "source", false, "SOURCE");
        public final static Property MediaLink = new Property(17, String.class, "mediaLink", false, "MEDIA_LINK");
        public final static Property InReplyToStatusId = new Property(18, Long.class, "inReplyToStatusId", false, "IN_REPLY_TO_STATUS_ID");
        public final static Property InReplyToUserId = new Property(19, Long.class, "inReplyToUserId", false, "IN_REPLY_TO_USER_ID");
        public final static Property InReplyToUserName = new Property(20, String.class, "inReplyToUserName", false, "IN_REPLY_TO_USER_NAME");
        public final static Property InReplyToUserScreenName = new Property(21, String.class, "inReplyToUserScreenName", false, "IN_REPLY_TO_USER_SCREEN_NAME");
        public final static Property JsonString = new Property(22, String.class, "jsonString", false, "JSON_STRING");
    };


    public StatusDao(DaoConfig config) {
        super(config);
    }
    
    public StatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STATUS' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'STATUS_ID' INTEGER," + // 1: statusId
                "'IS_RETWEET' INTEGER," + // 2: isRetweet
                "'IS_RETWEETED_BY_ME' INTEGER," + // 3: isRetweetedByMe
                "'IS_FAVORITE' INTEGER," + // 4: isFavorite
                "'RETWEET_ID' INTEGER," + // 5: retweetId
                "'RETWEETED_BY_USER_ID' INTEGER," + // 6: retweetedByUserId
                "'RETWEETED_BY_USER_NAME' TEXT," + // 7: retweetedByUserName
                "'RETWEETED_BY_USER_SCREEN_NAME' TEXT," + // 8: retweetedByUserScreenName
                "'USER_ID' INTEGER," + // 9: userId
                "'USER_NAME' TEXT," + // 10: userName
                "'USER_SCREEN_NAME' TEXT," + // 11: userScreenName
                "'USER_PROFILE_IMAGE_URL' TEXT," + // 12: userProfileImageUrl
                "'STATUS_TIME_STAMP' INTEGER," + // 13: statusTimeStamp
                "'TEXT' TEXT," + // 14: text
                "'RETWEET_COUNT' INTEGER," + // 15: retweetCount
                "'SOURCE' TEXT," + // 16: source
                "'MEDIA_LINK' TEXT," + // 17: mediaLink
                "'IN_REPLY_TO_STATUS_ID' INTEGER," + // 18: inReplyToStatusId
                "'IN_REPLY_TO_USER_ID' INTEGER," + // 19: inReplyToUserId
                "'IN_REPLY_TO_USER_NAME' TEXT," + // 20: inReplyToUserName
                "'IN_REPLY_TO_USER_SCREEN_NAME' TEXT," + // 21: inReplyToUserScreenName
                "'JSON_STRING' TEXT);"); // 22: jsonString
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STATUS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TwitterStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long statusId = entity.getStatusId();
        if (statusId != null) {
            stmt.bindLong(2, statusId);
        }
 
        Boolean isRetweet = entity.isRetweet();
        if (isRetweet != null) {
            stmt.bindLong(3, isRetweet ? 1l: 0l);
        }
 
        Boolean isRetweetedByMe = entity.getIsRetweetedByMe();
        if (isRetweetedByMe != null) {
            stmt.bindLong(4, isRetweetedByMe ? 1l: 0l);
        }
 
        Boolean isFavorite = entity.isFavorite();
        if (isFavorite != null) {
            stmt.bindLong(5, isFavorite ? 1l: 0l);
        }
 
        Long retweetId = entity.getRetweetId();
        if (retweetId != null) {
            stmt.bindLong(6, retweetId);
        }
 
        Long retweetedByUserId = entity.getRetweetedByUserId();
        if (retweetedByUserId != null) {
            stmt.bindLong(7, retweetedByUserId);
        }
 
        String retweetedByUserName = entity.getRetweetedByUserName();
        if (retweetedByUserName != null) {
            stmt.bindString(8, retweetedByUserName);
        }
 
        String retweetedByUserScreenName = entity.getRetweetedByUserScreenName();
        if (retweetedByUserScreenName != null) {
            stmt.bindString(9, retweetedByUserScreenName);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(10, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(11, userName);
        }
 
        String userScreenName = entity.getUserScreenName();
        if (userScreenName != null) {
            stmt.bindString(12, userScreenName);
        }
 
        String userProfileImageUrl = entity.getUserProfileImageUrl();
        if (userProfileImageUrl != null) {
            stmt.bindString(13, userProfileImageUrl);
        }
 
        Long statusTimeStamp = entity.getStatusTimeStamp();
        if (statusTimeStamp != null) {
            stmt.bindLong(14, statusTimeStamp);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(15, text);
        }
 
        Integer retweetCount = entity.getRetweetCount();
        if (retweetCount != null) {
            stmt.bindLong(16, retweetCount);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(17, source);
        }
 
        String mediaLink = entity.getMediaLink();
        if (mediaLink != null) {
            stmt.bindString(18, mediaLink);
        }
 
        Long inReplyToStatusId = entity.getInReplyToStatusId();
        if (inReplyToStatusId != null) {
            stmt.bindLong(19, inReplyToStatusId);
        }
 
        Long inReplyToUserId = entity.getInReplyToUserId();
        if (inReplyToUserId != null) {
            stmt.bindLong(20, inReplyToUserId);
        }
 
        String inReplyToUserName = entity.getInReplyToUserName();
        if (inReplyToUserName != null) {
            stmt.bindString(21, inReplyToUserName);
        }
 
        String inReplyToUserScreenName = entity.getInReplyToUserScreenName();
        if (inReplyToUserScreenName != null) {
            stmt.bindString(22, inReplyToUserScreenName);
        }
 
        String jsonString = entity.getJsonString();
        if (jsonString != null) {
            stmt.bindString(23, jsonString);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TwitterStatus readEntity(Cursor cursor, int offset) {
        TwitterStatus entity = new TwitterStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // statusId
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isRetweet
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isRetweetedByMe
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isFavorite
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // retweetId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // retweetedByUserId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // retweetedByUserName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // retweetedByUserScreenName
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userScreenName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // userProfileImageUrl
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // statusTimeStamp
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // text
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // retweetCount
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // source
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // mediaLink
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // inReplyToStatusId
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // inReplyToUserId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // inReplyToUserName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // inReplyToUserScreenName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // jsonString
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TwitterStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatusId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIsRetweet(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setIsRetweetedByMe(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsFavorite(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setRetweetId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setRetweetedByUserId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRetweetedByUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRetweetedByUserScreenName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setUserName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserScreenName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserProfileImageUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStatusTimeStamp(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setText(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRetweetCount(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSource(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMediaLink(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setInReplyToStatusId(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setInReplyToUserId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setInReplyToUserName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setInReplyToUserScreenName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setJsonString(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TwitterStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TwitterStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
